{"version":3,"sources":["constants/ActionTypes.js","data/layers/backgroundLayers.js","data/layers/wmsLayers.js","state/Select.js","state/Action.js","components/ControlledMap.js","components/ControlledMapSet.js","data/layers/vectorLayers.js","data/layers/cogLayers.js","components/Cogs.js","components/App.js","data/view.js","app.js","core.js","state/Store.js","index.js"],"names":["commonActionTypes","topomap","key","name","type","options","url","maxNativeZoom","attribution","theme","imagery","greyCanvas","osm","href","target","rel","cartoDark","cartoGrey","cuzkOrtofoto","params","layers","CommonSelect","CommonAction","vlachTestApp","initApp","view","dispatch","getState","views","add","maps","updateStateFromView","data","state","selections","updateStateFromViewWithData","connects","Map","PresentationMap","MapSet","Icon","nuts2","features","polygons","fidColumnName","hoverable","hovered","style","selectable","selected","test","pointsCz50","points","pointAsMarker","rules","styles","outlineColor","outlineWidth","fill","attributeKey","attributeScale","size","inputInterval","outputInterval","pointsLetna","points_letna","attributeValues","metro","shape","tram","icon","vegtral","parking","ntm","gisat","iconFill","A","C","cogArgentina","opacity","color","bandIndex","values","0","france","1","2","cogLayers","center","lat","lon","boxRange","Cogs","props","className","mapComponent","ReactLeafletMap","backgroundLayer","backgroundLayers","levelsBased","zoomOnly","maxWidth","App","controlledMap","vectorLayers","map1","map2","map3","sets","controlledMapSet","activeMapKey","sync","wmsLayers","activeKey","hoveredColor","init","Store","absPath","isPreloaded","currentUrl","navHandler","router","initCore","createRouter","rootUrl","routes","handler","request","Action","app","setKey","setBaseUrl","process","ConnectedAppContainer","AppContainer","AppComponent","Helmet","defaultTitle","appKey","isServer","createMemoryHistory","createBrowserHistory","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createEnhancer","requestCounter","reduxBatch","middlewares","createAsyncMiddleware","thunk","applyMiddleware","filter","v","createMiddleware","createAppStore","store","__PRELOADED_STATE__","initialState","createRequestCounter","createStore","combineReducers","baseStores","location","protocol","host","Application","rootEl","document","getElementById","hasChildNodes","ReactDOM","hydrate","render","renderApp"],"mappings":"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","file":"static/js/main.492985db.chunk.js","sourcesContent":["import {commonActionTypes} from '@gisatcz/ptr-state';\r\n\r\nexport default {\r\n\t...commonActionTypes,\r\n};\r\n","import React from 'react';\r\n\r\nexport default {\r\n\ttopomap: {\r\n\t\tkey: 'topomap',\r\n\t\tname: 'ESRI Topomap',\r\n\t\ttype: 'wmts',\r\n\t\toptions: {\r\n\t\t\turl: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',\r\n\t\t\tmaxNativeZoom: 16,\r\n\t\t},\r\n\t\tattribution: <>Esri, USGS | Esri, HERE, Garmin, FAO, NOAA, USGS</>,\r\n\t\ttheme: 'light',\r\n\t},\r\n\timagery: {\r\n\t\tkey: 'imagery',\r\n\t\tname: 'ESRI Imagery',\r\n\t\ttype: 'wmts',\r\n\t\toptions: {\r\n\t\t\turl: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\r\n\t\t\tmaxNativeZoom: 17,\r\n\t\t},\r\n\t\tattribution: (\r\n\t\t\t<>Esri, USGS | Esri, Garmin, FAO, NOAA | Earthstar Geographics</>\r\n\t\t),\r\n\t\ttheme: 'dark',\r\n\t},\r\n\tgreyCanvas: {\r\n\t\tkey: 'greyCanvas',\r\n\t\tname: 'ESRI Grey Canvas',\r\n\t\ttype: 'wmts',\r\n\t\toptions: {\r\n\t\t\turl: 'https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}',\r\n\t\t\tmaxNativeZoom: 16,\r\n\t\t},\r\n\t\tattribution: <>Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ</>,\r\n\t\ttheme: 'light',\r\n\t},\r\n\tosm: {\r\n\t\tkey: 'osm',\r\n\t\tname: 'OpenStreetMap',\r\n\t\ttype: 'wmts',\r\n\t\toptions: {\r\n\t\t\turl: 'https://{s}.tile.osm.org/{z}/{x}/{y}.png',\r\n\t\t},\r\n\t\tattribution: (\r\n\t\t\t<>\r\n\t\t\t\tÂ©{' '}\r\n\t\t\t\t<a\r\n\t\t\t\t\thref=\"https://www.openstreetmap.org/copyright\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t>\r\n\t\t\t\t\tOpenStreetMap\r\n\t\t\t\t</a>{' '}\r\n\t\t\t\tcontributors\r\n\t\t\t</>\r\n\t\t),\r\n\t\ttheme: 'light',\r\n\t},\r\n\tcartoDark: {\r\n\t\tkey: 'cartoDark',\r\n\t\tname: 'CartoDB - dark',\r\n\t\ttype: 'wmts',\r\n\t\toptions: {\r\n\t\t\turl: 'https://{s}.basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png',\r\n\t\t},\r\n\t\tattribution: (\r\n\t\t\t<>\r\n\t\t\t\t&copy;{' '}\r\n\t\t\t\t<a\r\n\t\t\t\t\thref=\"https://www.openstreetmap.org/copyright\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t>\r\n\t\t\t\t\tOpenStreetMap\r\n\t\t\t\t</a>{' '}\r\n\t\t\t\tcontributors,{' '}\r\n\t\t\t\t<a\r\n\t\t\t\t\thref=\"https://creativecommons.org/licenses/by-sa/2.0/\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t>\r\n\t\t\t\t\tCC-BY-SA\r\n\t\t\t\t</a>\r\n\t\t\t</>\r\n\t\t),\r\n\t\ttheme: 'dark',\r\n\t},\r\n\tcartoGrey: {\r\n\t\tkey: 'cartoGrey',\r\n\t\tname: 'CartoDB - grey',\r\n\t\ttype: 'wmts',\r\n\t\toptions: {\r\n\t\t\turl: 'https://{s}.basemaps.cartocdn.com/rastertiles/light_all/{z}/{x}/{y}.png',\r\n\t\t},\r\n\t\tattribution: (\r\n\t\t\t<>\r\n\t\t\t\t&copy;{' '}\r\n\t\t\t\t<a\r\n\t\t\t\t\thref=\"https://www.openstreetmap.org/copyright\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t>\r\n\t\t\t\t\tOpenStreetMap\r\n\t\t\t\t</a>{' '}\r\n\t\t\t\tcontributors,{' '}\r\n\t\t\t\t<a\r\n\t\t\t\t\thref=\"https://creativecommons.org/licenses/by-sa/2.0/\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t>\r\n\t\t\t\t\tCC-BY-SA\r\n\t\t\t\t</a>\r\n\t\t\t</>\r\n\t\t),\r\n\t\ttheme: 'light',\r\n\t},\r\n};\r\n","export default {\r\n    cuzkOrtofoto: {\r\n        key: 'cuzkOrtofoto',\r\n        name: 'CUZK Ortofoto',\r\n        type: 'wms',\r\n        options: {\r\n            url: 'http://geoportal.cuzk.cz/WMS_ORTOFOTO_PUB/WMService.aspx?',\r\n            params: {\r\n                layers: 'GR_ORTFOTORGB'\r\n            }\r\n        }\r\n    }\r\n};\r\n","import {createSelector} from 'reselect';\r\nimport {find as _find, forEach as _forEach, isEmpty as _isEmpty} from 'lodash';\r\nimport {Select as CommonSelect, commonSelectors} from '@gisatcz/ptr-state';\r\n\r\n// data\r\nimport backgroundLayers from '../data/layers/backgroundLayers';\r\nimport wmsLayers from '../data/layers/wmsLayers';\r\n\r\nconst getAvailableBackgroundLayers = () => backgroundLayers;\r\nconst getAvailableWmsLayers = () => wmsLayers;\r\n\r\nexport default {\r\n\t...CommonSelect,\r\n};\r\n","import {\r\n\tforIn as _forIn,\r\n\tcloneDeep as _cloneDeep,\r\n\tisEqual as _isEqual,\r\n} from 'lodash';\r\nimport {Action as CommonAction, commonActions} from '@gisatcz/ptr-state';\r\nimport ActionTypes from '../constants/ActionTypes';\r\nimport Select from './Select';\r\n\r\nfunction initApp(view) {\r\n\treturn (dispatch, getState) => {\r\n\t\t// add view\r\n\t\tdispatch(CommonAction.views.add(view));\r\n\r\n\t\t// apply view\r\n\t\tdispatch(CommonAction.maps.updateStateFromView(view?.data?.state?.maps));\r\n\t\tdispatch(CommonAction.selections.updateStateFromViewWithData(view?.data?.state?.selections));\r\n\t};\r\n}\r\n\r\nexport default {\r\n\t...CommonAction,\r\n\tvlachTestApp: {\r\n\t\tinitApp,\r\n\t},\r\n};\r\n","import React from \"react\";\r\nimport {ReactLeafletMap, PresentationMap, MapControls, MapScale} from \"@gisatcz/ptr-maps\";\r\nimport {connects} from \"@gisatcz/ptr-state\";\r\n\r\nconst Map = connects.Map(PresentationMap);\r\n\r\nconst ControlledMap = ({stateMapKey}) => {\r\n    return (\r\n        <div className=\"vta-MapWrapper\">\r\n            <Map mapComponent={ReactLeafletMap} stateMapKey={stateMapKey}>\r\n                <MapControls levelsBased zoomOnly/>\r\n                <MapScale maxWidth={150} />\r\n            </Map>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlledMap;","import React from \"react\";\r\nimport {ReactLeafletMap, PresentationMap, MapControls, MapSet, MapScale} from \"@gisatcz/ptr-maps\";\r\nimport {connects} from \"@gisatcz/ptr-state\";\r\n\r\nconst ConnectedMap = connects.Map(PresentationMap);\r\nconst ConnectedMapSet = connects.MapSet(MapSet);\r\n\r\nconst ControlledMapSet = ({stateMapSetKey}) => {\r\n    return (\r\n        <div className=\"vta-MapWrapper\">\r\n            <ConnectedMapSet\r\n                stateMapSetKey={stateMapSetKey}\r\n                mapComponent={ReactLeafletMap}\r\n                connectedMapComponent={ConnectedMap}\r\n            >\r\n                <MapControls levelsBased zoomOnly/>\r\n                <MapScale maxWidth={150} />\r\n            </ConnectedMapSet>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlledMapSet;","import {Icon} from '@gisatcz/ptr-atoms';\r\n\r\nimport points from './features/points_cz_50.json';\r\nimport polygons from './features/polygons_nuts_2.json';\r\nimport points_letna from './features/points_letna.json';\r\n\r\n// Shapes & icons\r\nexport const iconResources = {\r\n    icons: {\r\n        gisat: {\r\n            component: Icon,\r\n            componentProps: {icon: 'gisat'},\r\n            anchorPoint: [0.5, 0.5],\r\n        },\r\n        monitoring: {\r\n            component: Icon,\r\n            componentProps: {icon: 'monitoring'},\r\n            anchorPoint: [0.5, 1],\r\n        },\r\n        crop: {\r\n            component: Icon,\r\n            componentProps: {icon: 'crop'},\r\n            anchorPoint: [0, 1],\r\n        },\r\n        cross: {\r\n            component: Icon,\r\n            componentProps: {icon: 'cross'},\r\n            anchorPoint: [0.5, 0.5],\r\n        },\r\n    },\r\n};\r\n\r\nconst shapeStyle = {\r\n    rules: [\r\n        {\r\n            styles: [\r\n                {\r\n                    attributeKey: 'type',\r\n                    attributeValues: {\r\n                        metro: {\r\n                            fill: '#efefef',\r\n                            shape: 'pin',\r\n                            size: 32,\r\n                            outlineWidth: 2,\r\n                        },\r\n                        tram: {\r\n                            fill: '#992f2f',\r\n                            icon: 'monitoring',\r\n                            size: 32,\r\n                        },\r\n                        vegtral: {\r\n                            fill: '#724e25',\r\n                            icon: 'crop',\r\n                            size: 32,\r\n                        },\r\n                        parking: {\r\n                            shape: 'cross',\r\n                            size: 32,\r\n                            outlineWidth: 4,\r\n                            outlineColor: '#27b0c4',\r\n                        },\r\n                        ntm: {\r\n                            shape: 'square',\r\n                            size: 32,\r\n                            outlineWidth: 2,\r\n                            outlineColor: '#4d8c6e',\r\n                            fill: '#89d6ae',\r\n                        },\r\n                        gisat: {\r\n                            size: 96,\r\n                            shape: 'pin',\r\n                            outlineWidth: 3,\r\n                            outlineColor: '#395fab',\r\n                            fill: '#efefef',\r\n                            iconFill: '#122f64',\r\n                            icon: 'gisat',\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    attributeKey: 'line',\r\n                    attributeValues: {\r\n                        A: {\r\n                            outlineColor: '#2d9b2d',\r\n                        },\r\n                        C: {\r\n                            outlineColor: '#ff0000',\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n};\r\n\r\nexport default {\r\n    nuts2: {\r\n        key: 'nuts2',\r\n        type: \"vector\",\r\n        options: {\r\n            features: polygons,\r\n            fidColumnName: \"id\",\r\n            // renderingTechnique: \"canvas\",\r\n            hoverable: true,\r\n            hovered: {\r\n                style: 'default',\r\n            },\r\n            selectable: true,\r\n            selected: {\r\n                test: {},\r\n            },\r\n        }\r\n    },\r\n    pointsCz50: {\r\n        key: 'pointsCz50',\r\n        type: \"vector\",\r\n        options: {\r\n            features: points,\r\n            fidColumnName: \"gid\",\r\n            // renderingTechnique: \"canvas\",\r\n            pointAsMarker: true,\r\n            style: {\r\n                rules: [\r\n                    {\r\n                        styles: [\r\n                            {\r\n                                outlineColor: '#000000',\r\n                                outlineWidth: 1,\r\n                                fill: '#ffffff',\r\n                            },\r\n                            {\r\n                                attributeKey: 'attr1',\r\n                                attributeScale: {\r\n                                    size: {\r\n                                        inputInterval: [0, 100],\r\n                                        outputInterval: [1, 20],\r\n                                    },\r\n                                },\r\n                            },\r\n                        ],\r\n                    },\r\n                ],\r\n            }\r\n        }\r\n    },\r\n    pointsLetna: {\r\n        key: 'pointsLetna',\r\n        type: \"vector\",\r\n        options: {\r\n            features: points_letna,\r\n            fidColumnName: \"id\",\r\n            pointAsMarker: true,\r\n            style: shapeStyle,\r\n            selectable: true,\r\n            selected: {\r\n                test: {},\r\n            },\r\n        }\r\n    }\r\n};\r\n","export default {\r\n    cogArgentina: {\r\n        key: 'cogArgentina',\r\n        type: 'cog',\r\n        opacity: 0.7,\r\n        options: {\r\n            url: 'https://gisat-gis.eu-central-1.linodeobjects.com/worldcereal/example/21HTC/2020_21HTC_annualcropland_classification_WorldCerealPixelLSTM.tif',\r\n            style: {\r\n                rules: [{\r\n                    styles: [{\r\n                        color: \"#000000\"\r\n                    },{\r\n                        bandIndex: 0,\r\n                        values: {\r\n                            0: {color: null}\r\n                        }\r\n                    }]\r\n                }]\r\n            }\r\n        }\r\n    },\r\n    france: {\r\n        key: 'france',\r\n        type: 'cog',\r\n        opacity: 0.7,\r\n        options: {\r\n            url: 'https://s3.waw2-1.cloudferro.com/swift/v1/AUTH_b33f63f311844f2fbf62c5741ff0f734/ewoc-prd/merged/AEZ_11071/2019_summer1/2019_summer1_11071_activecropland_classification.tif',\r\n            style: {\r\n                rules: [\r\n                    {\r\n                        styles: [\r\n                            {\r\n                                color: null,\r\n                            },\r\n                            {\r\n                                bandIndex: 0,\r\n                                values: {\r\n                                    1: {color: '#ff6767'},\r\n                                    2: {color: '#2ca52a'}\r\n                                }\r\n                            },\r\n                        ],\r\n                    },\r\n                ],\r\n            }\r\n        }\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport {ReactLeafletMap, PresentationMap, MapControls, MapScale, DeckGlMap} from \"@gisatcz/ptr-maps\";\r\nimport backgroundLayers from \"../data/layers/backgroundLayers\";\r\nimport cogLayers from \"../data/layers/cogLayers\";\r\n\r\nconst layers = [cogLayers.france];\r\nconst view = {\r\n    center: {lat: 47, lon: 0},\r\n    boxRange: 400000\r\n};\r\n\r\nconst Cogs = (props) => {\r\n    return (\r\n        <div className=\"vta-MapWrapper\">\r\n            <PresentationMap\r\n                mapComponent={ReactLeafletMap}\r\n                backgroundLayer={backgroundLayers.cartoGrey}\r\n                layers={layers}\r\n                view={view}\r\n            >\r\n                <MapControls levelsBased zoomOnly/>\r\n                <MapScale maxWidth={150} />\r\n            </PresentationMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cogs;","import React from \"react\";\r\nimport ControlledMap from \"./ControlledMap\";\r\nimport ControlledMapSet from \"./ControlledMapSet\";\r\nimport PresentationalMap from \"./PresentationalMap\";\r\nimport PresentationalMapWithControls from \"./PresentationalMapWithControls\";\r\nimport PresentationalMapSet from \"./PresentationalMapSet\";\r\nimport Cogs from \"./Cogs\";\r\n\r\nimport backgroundLayers from \"../data/layers/backgroundLayers\";\r\nimport wmsLayers from \"../data/layers/wmsLayers\";\r\nimport vectorLayers from \"../data/layers/vectorLayers\";\r\nimport cogLayers from \"../data/layers/cogLayers\";\r\n\r\nconst view = {\r\n\tcenter: {lat: 47, lon: 0},\r\n\tboxRange: 400000\r\n};\r\n\r\nconst viewLimits = {\r\n\tboxRangeRange: [1000, 100000],\r\n\tcenter: {\r\n\t\tminLat: 49,\r\n\t\tminLon: 13,\r\n\t\tmaxLat: 51,\r\n\t\tmaxLon: 16\r\n\t}\r\n}\r\n\r\nconst viewLetna = {\r\n\tcenter: {lat: 50.0995436, lon: 14.4225},\r\n\tboxRange: 5000,\r\n};\r\n\r\nconst layers = [backgroundLayers.cartoGrey, wmsLayers.cuzkOrtofoto];\r\nconst layers2 = [vectorLayers.nuts2];\r\nconst layers3 = [cogLayers.france];\r\nconst layersLetna = [vectorLayers.pointsLetna];\r\n\r\nconst App = () => (\r\n\t<div className=\"vta-App\">\r\n\t\t<Cogs/>\r\n\t\t{/*<h3>Controlled map set</h3>*/}\r\n\t\t{/*<ControlledMapSet stateMapSetKey=\"controlledMapSet\"/>*/}\r\n\t\t{/*<h3>Controlled map</h3>*/}\r\n\t\t{/*<ControlledMap stateMapKey=\"controlledMap\"/>*/}\r\n\t\t{/*<h3>Presentational map set</h3>*/}\r\n\t\t{/*<PresentationalMapSet view={view} backgroundLayer={backgroundLayers.osm}/>*/}\r\n\t\t{/*<h3>Presentational map with controls</h3>*/}\r\n\t\t{/*<PresentationalMapWithControls view={view} backgroundLayer={backgroundLayers.cartoGrey} layers={layers3}/>*/}\r\n\t\t{/*<h3>Presentational map</h3>*/}\r\n\t\t{/*<PresentationalMap view={view} backgroundLayer={backgroundLayers.osm} layers={layers2}/>*/}\r\n\t\t{/*<h3>Presentational map with controls - icons</h3>*/}\r\n\t\t{/*<PresentationalMapWithControls view={view} backgroundLayer={backgroundLayers.osm}/>*/}\r\n\t</div>\r\n);\r\n\r\nexport default App;\r\n","import backgroundLayers from './layers/backgroundLayers';\r\nimport wmsLayers from \"./layers/wmsLayers\";\r\nimport cogLayers from \"./layers/cogLayers\";\r\nimport vectorLayers from \"./layers/vectorLayers\";\r\n\r\nconst layers = [vectorLayers.nuts2, vectorLayers.pointsCz50];\r\nconst layers2 = [vectorLayers.pointsLetna];\r\n\r\nexport default {\r\n\tkey: '204188df-5c90-49d5-9f6d-83bed1c725bb',\r\n\tdata: {\r\n\t\tstate: {\r\n\t\t\tmaps: {\r\n\t\t\t\tmaps: {\r\n\t\t\t\t\tcontrolledMap: {\r\n\t\t\t\t\t\tkey: 'controlledMap',\r\n\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\tbackgroundLayer: backgroundLayers.osm,\r\n\t\t\t\t\t\t\tlayers: layers2,\r\n\t\t\t\t\t\t\tview: {\r\n\t\t\t\t\t\t\t\tcenter: {lat: 50, lon: 15},\r\n\t\t\t\t\t\t\t\tboxRange: 400000\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmap1: {\r\n\t\t\t\t\t\tkey: 'map1'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmap2: {\r\n\t\t\t\t\t\tkey: 'map2'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmap3: {\r\n\t\t\t\t\t\tkey: 'map3'\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tsets: {\r\n\t\t\t\t\tcontrolledMapSet: {\r\n\t\t\t\t\t\tkey: 'controlledMapSet',\r\n\t\t\t\t\t\tmaps: ['map1', 'map2', 'map3'],\r\n\t\t\t\t\t\tactiveMapKey: 'map1',\r\n\t\t\t\t\t\tsync: {\r\n\t\t\t\t\t\t\tcenter: true,\r\n\t\t\t\t\t\t\tboxRange: true\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\tbackgroundLayer: backgroundLayers.osm,\r\n\t\t\t\t\t\t\tlayers: [wmsLayers.cuzkOrtofoto],\r\n\t\t\t\t\t\t\tview: {\r\n\t\t\t\t\t\t\t\tcenter: {lat: 50, lon: 15},\r\n\t\t\t\t\t\t\t\tboxRange: 400000\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tselections: {\r\n\t\t\t\tactiveKey: 'test',\r\n\t\t\t\tdata: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkey: 'test',\r\n\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\tcolor: '#00fffe',\r\n\t\t\t\t\t\t\thoveredColor: '#1efbff',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n};\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport Favicon from 'react-favicon';\r\n\r\nimport {connects} from '@gisatcz/ptr-state';\r\nimport Action from './state/Action';\r\n\r\n// base styles need to be imported before all components\r\nimport '@gisatcz/ptr-core/lib/styles/reset.css';\r\nimport '@gisatcz/ptr-core/lib/styles/base.scss';\r\nimport './style.scss';\r\n\r\nimport {AppContainer} from '@gisatcz/ptr-components';\r\n\r\nimport {create as createRouter} from '@gisatcz/ptr-router';\r\nimport {init as initCore} from './core';\r\nimport App from './components/App';\r\n\r\nimport view from './data/view';\r\n\r\nconst path = process.env.PUBLIC_URL;\r\n\r\nfunction createRoutes(Store) {\r\n\treturn {\r\n\t\t'': {\r\n\t\t\tname: 'homepage',\r\n\t\t\thandler: function (request) {},\r\n\t\t},\r\n\t};\r\n}\r\n\r\nfunction init(Store, {absPath, isPreloaded, currentUrl, navHandler}) {\r\n\t/**\r\n\t * Creates router instance that can be used to manipulat urls.\r\n\t *\r\n\t * App handler updates store with current page and it's up to views to react to the change.\r\n\t * In case of url change, redux selector possibly retrieves different data and passes them\r\n\t * into some the component.\r\n\t *\r\n\t */\r\n\r\n\tconst router = createRouter({\r\n\t\trootUrl: absPath,\r\n\t\tcurrentUrl,\r\n\t\troutes: createRoutes(Store),\r\n\t\tnavHandler,\r\n\t});\r\n\r\n\tinitCore({router});\r\n\r\n\tif (isPreloaded) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tStore.dispatch(Action.app.setKey('vlachTestApp'));\r\n\tStore.dispatch(Action.app.setBaseUrl(path));\r\n\r\n\t/* Intit insar app */\r\n\tStore.dispatch(Action.vlachTestApp.initApp(view));\r\n}\r\n\r\nconst ConnectedAppContainer = connects.AppContainer(AppContainer);\r\n\r\nconst AppComponent = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet defaultTitle=\"--- Test ---\" />\r\n\t\t\t<ConnectedAppContainer appKey=\"vta\">\r\n\t\t\t\t<App />\r\n\t\t\t</ConnectedAppContainer>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport {AppComponent as App, init};\r\n","/**\r\n * Should be populated on app initialization.\r\n *\r\n * Alternatively, we could pass it via react context.\r\n */\r\nlet _router = null;\r\nexport {_router as router};\r\n\r\nexport function init({router}) {\r\n\t_router = router;\r\n}\r\n","import {\r\n\tcreateStore,\r\n\tcombineReducers,\r\n\tapplyMiddleware,\r\n\tcompose,\r\n\tthunk,\r\n\treduxBatch,\r\n\tlogger,\r\n} from '@gisatcz/ptr-state';\r\nimport {createBrowserHistory, createMemoryHistory} from 'history';\r\nimport {init as initApp} from '../app';\r\nimport {\r\n\tcreateRequestCounter,\r\n\tcreateAsyncMiddleware,\r\n\tisServer,\r\n} from '@gisatcz/ptr-core';\r\n\r\n// base types\r\nimport {baseStores} from '@gisatcz/ptr-state';\r\n\r\nexport const history = isServer\r\n\t? createMemoryHistory()\r\n\t: createBrowserHistory();\r\n\r\nfunction createMiddleware(requestCounter) {\r\n\tconst middlewares = [\r\n\t\tcreateAsyncMiddleware(requestCounter),\r\n\t\tthunk,\r\n\t\tprocess.env.NODE_ENV === 'development' && !isServer && logger,\r\n\t];\r\n\r\n\treturn applyMiddleware(...middlewares.filter(v => v !== false));\r\n}\r\n\r\nfunction createReducer() {\r\n\treturn combineReducers({\r\n\t\t...baseStores,\r\n\t});\r\n}\r\n\r\nconst composeEnhancers =\r\n\t(typeof window !== 'undefined' &&\r\n\t\twindow?.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?.({})) ||\r\n\tcompose;\r\n\r\nfunction createEnhancer(requestCounter) {\r\n\treturn composeEnhancers(\r\n\t\treduxBatch,\r\n\t\tcreateMiddleware(requestCounter),\r\n\t\treduxBatch\r\n\t);\r\n}\r\n\r\n/**\r\n * Returns object with keys `store`, `readyP`.\r\n * - `readyP` - Promise that resolves once the app is initialized (helpful with SSR).\r\n * - `store` - Redux store.\r\n */\r\nfunction createAppStore(options) {\r\n\tconst isPreloaded = !isServer && window.__PRELOADED_STATE__ != null;\r\n\tconst initialState = isPreloaded ? window.__PRELOADED_STATE__ : {};\r\n\tif (isPreloaded) {\r\n\t\tdelete window.__PRELOADED_STATE__;\r\n\t}\r\n\r\n\tconst requestCounter = createRequestCounter();\r\n\tconst store = createStore(\r\n\t\tcreateReducer(),\r\n\t\tinitialState,\r\n\t\tcreateEnhancer(requestCounter)\r\n\t);\r\n\r\n\tconst absPath =\r\n\t\toptions?.absPath ??\r\n\t\twindow.location.protocol +\r\n\t\t\t'//' +\r\n\t\t\twindow.location.host +\r\n\t\t\tprocess.env.PUBLIC_URL;\r\n\r\n\tinitApp(store, {\r\n\t\tabsPath,\r\n\t\tisPreloaded,\r\n\t\tcurrentUrl: options?.currentUrl,\r\n\t\tnavHandler: options?.navHandler,\r\n\t});\r\n\r\n\treturn {\r\n\t\tstore: store,\r\n\t\trequestCounter: requestCounter,\r\n\t};\r\n}\r\n\r\nexport default createAppStore;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from '@gisatcz/ptr-state';\r\nimport {isServer} from '@gisatcz/ptr-core';\r\n\r\nimport createStore from './state/Store';\r\nimport {App} from './app';\r\n\r\nconst {store} = createStore();\r\n\r\nconst Application = () => (\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>\r\n);\r\n\r\nfunction renderApp() {\r\n\tconst rootEl = document.getElementById('root');\r\n\tconst render =\r\n\t\tisServer || rootEl.hasChildNodes() ? ReactDOM.hydrate : ReactDOM.render;\r\n\trender(<Application />, rootEl);\r\n}\r\n\r\nrenderApp();\r\n"],"sourceRoot":""}